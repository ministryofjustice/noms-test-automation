#version: 2
#jobs:
#  build:
#    docker:
#      - image: circleci/python:2.7-stretch-browsers
#
#    steps:
#      - checkout
#      - run: mkdir test-reports
##     - run:
##          name: Download Selenium
##          command: |
##            curl -O http://selenium-release.storage.googleapis.com/3.5/selenium-server-standalone-3.5.3.jar
##      - run:
##          name: Start Selenium
##          command: |
#            java -jar selenium-server-standalone-3.5.3.jar -log test-reports/selenium.log
##          background: true
#
#
#
#      - store_artifacts:
#          path: test-reports/
#          destination: tr1
#      - store_test_results:
#          path: test-reports/
#      - add_ssh_keys:
#          fingerprints:
#            - "48:a0:87:54:ca:75:32:12:c6:9e:a2:77:a4:7a:08:a4"
#
# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:2.7-stretch-browsers

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4




    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

#      - run:
#          name: install dependencies
#          command: |
#            python2 -m venv venv
#            . venv/bin/activate
#            pip install -r requirements.txt
      - run:
          name: "Add .local to path"
          command: |
            PATH=$PATH\:/~/.local/bin; export PATH

      - run:
          name: "Install robot"
          command: |
            pip install robotframework --user

      - run:
          name: "Install Selenium2Library"
          command: |
            pip install robotframework-Selenium2Library==1.8 --user

# TODO : Dry run For testing purpose
#      - run:
#          name: "Download Geckodriver"
#          command: |
#            wget https://github.com/mozilla/geckodriver/releases/download/v0.19.1/geckodriver-v0.19.1-linux32.tar.gz
#
#      - run:
#          name: "Extract the file"
#          command: |
#            sudo sh -c 'tar -x geckodriver -zf geckodriver-v0.19.1-linux32.tar.gz -O > /usr/local/bin/geckodriver'
#
#      - run:
#          name: "Make it executable"
#          command: |
#            sudo chmod +x /usr/local/bin/geckodriver
#
#      - run:
#          name: "geckodriver --version"
#          command: |
#            /usr/local/bin/geckodriver --version
#
#      - run:
#          name: "Remove"
#          command: |
#            rm geckodriver-v0.19.1-linux32.tar.gz

      - run:
          name: "Install mozdownload mozinstall"
          command: |
            pip install mozdownload mozinstall --user
      - run:
          name: "Download lastest verison of firefox"
          command: |
            mozdownload --version latest --destination firefox.tar.bz2
      - run:
          name: "Install firefox"
          command: |
            mozinstall firefox.tar.bz2
      - run:
          name: "Download gecko driver"
          command: |
            wget -O geckodriver.tar.gz https://github.com/mozilla/geckodriver/releases/download/v0.18.0/geckodriver-v0.18.0-linux64.tar.gz
      - run:
          name: "Unzip gecko driver"
          command: |
            gunzip -c geckodriver.tar.gz | tar xopf -
      - run:
          name: "Move gecko driver executable to bin"
          command: |
            chmod +x geckodriver && mv geckodriver /usr/bin/

      - run:
          name: "Get ff version"
          command: |
            firefox --version

      - run:
          command: |
            ~/.local/bin/pybot -d test-reports Tests/Login_Validation.robot

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

      # run tests!
      # this example uses Django's built-in test-runner
      # other common Python testing frameworks include pytest and nose
#      # https://pytest.org
#      # https://nose.readthedocs.io
#      - run:
#          name: run tests
#          command: |
#            . venv/bin/activate
#            python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
